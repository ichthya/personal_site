##river order = 2
net_2 <- rbind(subset(net, Order==2 & From != -9)[,3:4])
reps_2 <- subset(results_net, river.order == 2)
reps_2$count
pair_fst_2 <- subset(n.pairwise.fst, V1 %in% reps_2$count)
mean_fst_2 <- ddply(pair_fst_2, ~pop1+pop2, function(x){mean = round(mean(x$value), digits = 2)})
mat_fst_2 <- as.dist(t(dcast(mean_fst_2, pop1 ~ pop2)))
Pco_fst_2 <- pcoa(mat_fst_2)
pc_vec <- cbind(pc_vec, Pco_fst_2$vectors[,1:2])
##river order = 3
net_3 <- rbind(subset(net, Order==3 & From != -9)[,3:4])
reps_3 <- subset(results_net, river.order == 3)
reps_3$count
pair_fst_3 <- subset(n.pairwise.fst, V1 %in% reps_3$count)
mean_fst_3 <- ddply(pair_fst_3, ~pop1+pop2, function(x){mean = round(mean(x$value), digits = 2)})
mat_fst_3 <- as.dist(t(dcast(mean_fst_3, pop1 ~ pop2)))
Pco_fst_3 <- pcoa(mat_fst_3)
pc_vec <- cbind(pc_vec, Pco_fst_3$vectors[,1:2])
##river order = 4
net_4 <- rbind(subset(net, Order==4 & From != -9)[,3:4])
reps_4 <- subset(results_net, river.order == 4)
reps_4$count
pair_fst_4 <- subset(n.pairwise.fst, V1 %in% reps_4$count)
mean_fst_4 <- ddply(pair_fst_4, ~pop1+pop2, function(x){mean = round(mean(x$value), digits = 2)})
mat_fst_4 <- as.dist(t(dcast(mean_fst_4, pop1 ~ pop2)))
mean(mat_fst_4)
Pco_fst_4 <- pcoa(mat_fst_4)
pc_vec <- cbind(pc_vec, Pco_fst_4$vectors[,1:2])
##re-scalling all vectors together between 0-1
Pc_01 <- rescale(pc_vec, c(0,1))
#formatting data.frame for vertices in igraph for each river.order
aver1 <- c(1,2,3,4,5,6,7,8)
aver1 <- cbind(aver1, t(aver[1,2:9]), Pc_01[,1:2])
aver2 <- c(1,2,3,4,5,6,7,8)
aver2 <- cbind(aver2, t(aver[2,2:9]), Pc_01[,3:4])
aver3 <- c(1,2,3,4,5,6,7,8)
aver3 <- cbind(aver3, t(aver[3,2:9]), Pc_01[,5:6])
aver4 <- c(1,2,3,4,5,6,7,8)
aver4 <- cbind(aver4, t(aver[4,2:9]), Pc_01[,7:8])
#PLOTTING networks with igraph package
#RIVER 1
##genotypic richness
g2 <- graph.data.frame(net_1, vertices = aver1, directed = FALSE)
g <- simplify(g2)
lay <- layout.reingold.tilford(g, flip.y = FALSE, root=1)
plot(g,layout=lay,
edge.width=10, vertex.color = "red3", edge.color = "steelblue",
vertex.size=V(g)$"1", vertex.label = NA)
##FST with rgb colors
plot(g,layout=lay,
edge.width=10, vertex.color = rgb(aver1[,3], aver1[,4], 0.8), edge.color = "steelblue",
vertex.size=20, vertex.label = NA)
#RIVER 2
##genotypic richness
g2 <- graph.data.frame(net_2, vertices = aver2, directed = FALSE)
g <- simplify(g2)
lay <- layout.reingold.tilford(g, flip.y = FALSE, root=1)
plot(g,layout=lay,
edge.width=10, vertex.color = "red3", edge.color = "steelblue",
vertex.size=V(g)$"2", vertex.label = NA)
##FST with rgb colors
plot(g,layout=lay,
edge.width=10, vertex.color = rgb(aver2[,3], aver2[,4], 0.8), edge.color = "steelblue",
vertex.size=20, vertex.label = NA)
#RIVER 3
##genotypic richness
g2 <- graph.data.frame(net_3, vertices = aver3, directed = FALSE)
g <- simplify(g2)
lay <- layout.reingold.tilford(g, flip.y = FALSE, root=1)
plot(g,layout=lay,
edge.width=10, vertex.color = "red3", edge.color = "steelblue",
vertex.size=V(g)$"3", vertex.label = NA)
##FST with rgb colors
plot(g,layout=lay,
edge.width=10, vertex.color = rgb(aver3[,3], aver3[,4], 0.8), edge.color = "steelblue",
vertex.size=20, vertex.label = NA)
#RIVER 4
##genotypic richness
g2 <- graph.data.frame(net_4, vertices = aver4, directed = FALSE)
g <- simplify(g2)
lay <- layout.reingold.tilford(g, flip.y = FALSE, root=1)
plot(g,layout=lay,
edge.width=10, vertex.color = "red3", edge.color = "steelblue",
vertex.size=V(g)$"4", vertex.label = NA)
##FST with rgb colors
plot(g,layout=lay,
edge.width=10, edge.length=1, edge.color = "steelblue",
vertex.color = rgb(aver4[,3], aver4[,4], 1), vertex.size=20, vertex.label = NA)
#http://stackoverflow.com/questions/5968612/how-do-i-lengthen-edges-in-an-igraph-network-plot-layout-fruchterman-reingold
#tkplot(g, layout = lay)
plot(g,layout=lay,
edge.width=10, edge.color = "steelblue",
vertex.color = rgb(aver4[,3], aver4[,4], 1), vertex.size=20, vertex.label = NA)
setwd("~/Dropbox/Postdoc_UBC/Thomazetal_2016_DATA/New_fig3/")
n.pairwise.fst <- read.table(file="pairwise_fst_fig3.csv", header = T, sep=",");
results_net <- read.table(file="network_results.txt", header = T, sep="\t");
net <- read.csv("nodes_dataframe_mod.csv", header=T)
net_1 <- subset(net, Order==1 & From != -9)[,3:4]
net_1
head(results_net)
reps_1 <- subset(results_net, river.order == 1)
reps_1$count
pair_fst_1 <- subset(n.pairwise.fst, V1 %in% reps_1$count)
head(pair_fst_1)
unique(pair_fst_1)
unique(pair_fst_1$V1)
head(pair_fst_1)
tail(pair_fst_1)
reps_1$count
river_dist <- read.csv("River_Dist_fig3.csv", header = T)
head(river_dist)
river1 <- subset(river_dist, River==1)
river1[rep(seq_len(nrow(river1)), 30), ]
river1_ext <- river1[rep(seq_len(nrow(river1)), 30), ]
head(river1)
head(pair_fst_1)
river_ext <- river[rep(seq_len(nrow(river)), 30), ]
river_ext <- river_dist[rep(seq_len(nrow(river_dist)), 30), ]
river2 <- subset(river_dist, River==2)
river2_ext <- river2[rep(seq_len(nrow(river2)), 30), ]
river3_ext <- river3[rep(seq_len(nrow(river3)), 30), ]
river3 <- subset(river_dist, River==3)
#repeat it 30 times
river3_ext <- river3[rep(seq_len(nrow(river3)), 30), ]
river4 <- subset(river_dist, River==4)
#repeat it 30 times
river4_ext <- river4[rep(seq_len(nrow(river4)), 30), ]
river <- cbind(river1_ext, river2_ext, river3_ext, river4_ext)
river <- rbind(river1_ext, river2_ext, river3_ext, river4_ext)
head(river)
tail(river)
river_fst <- cbind(river, pair_fst_1)
head(river_fst)
river_fst <- merge(river, pair_fst_1)
head(river_fst)
river_fst <- cbind(river, pair_fst_1)
river_fst <- merge(river, pair_fst_1, by = "pop1" & "pop2")
river_fst <- cbind(river, pair_fst_1)
head(river_fst)
river_fst <- cbind(river, pair_fst_1, stringsAsFators = F)
head(river_fst)
river_fst <- cbind(river, pair_fst_1)
head(river_fst$pop1)
all(river_fst[,2], river_fst[,7])
river_fst[6,2]
all(river_fst[,3], river_fst[,8])
head(river_fst[,2], 100)
plot(river_fst$value, river_fst$Dist)
plot(river_fst$Dist, river_fst$value)
river_dist <- read.csv("River_Dist_fig3.csv", header = T)
river1 <- subset(river_dist, River==1)
#repeat it 30 times
river1_ext <- river1[rep(seq_len(nrow(river1)), 30), ]
river2 <- subset(river_dist, River==2)
#repeat it 30 times
river2_ext <- river2[rep(seq_len(nrow(river2)), 30), ]
river3 <- subset(river_dist, River==3)
#repeat it 30 times
river3_ext <- river3[rep(seq_len(nrow(river3)), 30), ]
river4 <- subset(river_dist, River==4)
#repeat it 30 times
river4_ext <- river4[rep(seq_len(nrow(river4)), 30), ]
river <- rbind(river1_ext, river2_ext, river3_ext, river4_ext)
river_fst <- cbind(river, pair_fst_1)
setwd("~/Dropbox/Postdoc_UBC/Thomazetal_2016_DATA/New_fig3/")
n.pairwise.fst <- read.table(file="pairwise_fst_fig3.csv", header = T, sep=",");
results_net <- read.table(file="network_results.txt", header = T, sep="\t");
net <- read.csv("nodes_dataframe_mod.csv", header=T)
river_dist <- read.csv("River_Dist_fig3.csv", header = T)
river1 <- subset(river_dist, River==1)
river1 <- subset(river_dist, River==1)
#repeat it 30 times
river1_ext <- river1[rep(seq_len(nrow(river1)), 30), ]
river2 <- subset(river_dist, River==2)
#repeat it 30 times
river2_ext <- river2[rep(seq_len(nrow(river2)), 30), ]
river3 <- subset(river_dist, River==3)
#repeat it 30 times
river3_ext <- river3[rep(seq_len(nrow(river3)), 30), ]
river4 <- subset(river_dist, River==4)
#repeat it 30 times
river4_ext <- river4[rep(seq_len(nrow(river4)), 30), ]
river <- rbind(river1_ext, river2_ext, river3_ext, river4_ext)
river_fst <- cbind(river, pair_fst_1)
n.pairwise.fst
head(n.pairwise.fst)
river_fst <- cbind(river, n.pairwise.fst)
head(river_fst)
all(river_fst[,2], river_fst[,7])
all(river_fst[,3], river_fst[,8])
plot(river_fst$Dist, river_fst$value)
require(ggplot)
require(ggplot2)
f <- ggplot(river_fst, aes(Dist, river_fst)); f
f <- ggplot(river_fst, aes(Dist, valeu)); f
f <- ggplot(river_fst, aes(Dist, value)); f
f <- ggplot(river_fst, aes(Dist, value)) +
geom_point(); f
f <- ggplot(river_fst, aes(Dist, value, color = River_pos)) +
geom_point(); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(alpha = 1/5); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(alpha = 1/10); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(alpha = 1/2); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(alpha = 1/4); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(alpha = 1/4) +
xlab("Pairwise River Dist. (Km)") + ylab("Pairwise FST") +
labs(fill = "River position"); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(alpha = 1/4) +
xlab("Pairwise River Dist. (Km)") + ylab("Pairwise FST") +
labs("River position"); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(alpha = 1/4) +
xlab("Pairwise River Dist. (Km)") + ylab("Pairwise FST") +
scale_fill_manual(name = "River position"); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(alpha = 1/4) +
xlab("Pairwise River Dist. (Km)") + ylab("Pairwise FST") +
scale_fill_discrete(name = "River position"); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(alpha = 1/4) +
xlab("Pairwise River Dist. (Km)") + ylab("Pairwise FST") +
scale_fill_discrete(name = "River position", labels = c("Same channel", "Different channel")); f
f <- ggplot(river_fst, aes(Dist, value, color = factor(River_pos))) +
geom_point(alpha = 1/4) +
xlab("Pairwise River Dist. (Km)") + ylab("Pairwise FST") +
scale_color_discrete(name = "River position", labels = c("Same channel", "Different channel")); f
1000/4
8/1000
1000/8
1000/16
1000/32
62.5*2
62.5*3
62.5*4
62.5*5
62.5*6
install.packages("fishmove")
library(fishmove)
Len    <- 60     # total.length of fish (mm)
AspRat <- 1.5    # aspect ratio of fish ((caudal fin height)^2/fin area)
Time   <- 365    # time step (days) between sampling periods, higher = further
fish           <- fishmove(L=Len,AR=AspRat,SO=3,T=Time,interval="confidence",rep=30) # use fish move to calculate disp kernel
fish
dist           <- fishmove.query(fish,p=0.67, dist=100)                             # see above
dist
pdk(fish)     # plot dispersal kernnel
dist           <- fishmove.query(fish,p=0.67, dist=10000)                             # see above
dist
dist           <- fishmove.query(fish,p=0.67, dist=1000)                             # see above
dist
fish
n.replicates     <- 030     # number of times to run model for each combination of variables
total.length     <- 700 # total length of the river in Km (sum of all the segments length)
river.set        <- 1:4  # An integer in the set 2:5 that represents river order
branch           <- 2  # 1 for linear, 2 for branching
flow.rate    <- 0.9 # must be >= 0.5 and <= 1. 1 = all migrants move downstream. 0.5 means half migrants move downstream and half upstream
#Model parameters
n.generations <- 500     # number of generations to run model
n.propagules  <- 10      # how many propagues to produce per individual at reproduction
c.capacity    <- 200     # the carrying capacity per patch (node)
n.alleles     <- 02      # initial number of alleles to use per locus (can increase over time with mutation)
n.loci        <- 50      # the total number of loci to use
mutation.rate <- 0.000001 # the per locus mutation rate
n.generations
network.all    <- river.matrix[river.matrix[, 1]==river.order & river.matrix[, 2]==branch, ]   # subset river network file for wanted river order and branch type
base.directory <- getwd()
source(paste(base.directory, "/source/FunctionSourcer.R", sep = ''))
outdir <- getwd() # directory to save model output
outdir
river.matrix
network.all    <- river.matrix[river.matrix[, 1]==river.order & river.matrix[, 2]==branch, ]   # subset river network file for wanted river order and branch type
count <- 1
river.order  <<- replicates[count, 2]
replicates <- Replicates(n.replicates, total.length, river.set, branch, flow.rate)
replicates
n.replicates
total.length
river.set
branch
flow.rate
river.order  <<- replicates[count, 2]
river.order
count
n.generations
network.all    <- river.matrix[river.matrix[, 1]==river.order & river.matrix[, 2]==branch, ]   # subset river network file for wanted river order and branch type
network.all
length(network.all[, 1])
segment.length <- total.length/(length(network.all[, 1]) - 1)                                  # calculate the length of each river segment (between pops; all equal)
segment.length
network      <- network.all[, -c(1,2)]   # remove first 2 columns for formatting
network
genotypes    <- InitialAlleleFrequencies(n.individs = length(unique(network[, 1]))*c.capacity, n.loci, n.alleles)
head(genotypes)
first.gtypes <- Initialization(genotypes, network, c.capacity)
head(first.gtypes)
gtypes       <- first.gtypes
alltypes <- Reproduction(gtypes, n.propagules)
head(alltypes)
nwork     <- network[-1, ]
nwork
popsize   <- data.frame(table(alltypes[, 2]))[1, 2]   # popsize of each deme; calculated after reproduction and before c.capacuty
popsize
alltypes[, 2]
table(alltypes[, 2]))[1, 2]
table(alltypes[, 2])
data.frame(table(alltypes[, 2]))[1, 2]
migrants  <- round(popsize*dist)                     # divide by two to compare with bidirectional
migrant
migrants
dist
dist <- 0.095  # number of migrants per generation == c.capacity * n.propagules * dist ~ 190 - but then there is mortaility to get back to c.capacity, so not 190 effective migrants
migrants  <- round(popsize*dist)                     # divide by two to compare with bidirectional
dist
migrants
dist
pop.freq()
popsize
migrants
migrants1 <- round(migrants*flow.rate)               # n migrants to move downstream
migrants1
migrants2 <- round(migrants*(1-flow.rate))           # nmigrants to move upstream
migrants2
i
i <- 1
pop1 <- nwork[i, 1]
pop1
nwork
pop2 <- nwork[i, 2]
pop2
m1   <- sample(which(alltypes[,2]==pop1), migrants1, replace = FALSE)
m1
m2   <- sample(which(alltypes[,2]==pop2), migrants2, replace = FALSE) # comment out for unidirectional dispersal
m2
alltypes[m1, 2] <- pop2
alltypes[m1, 2]
alltypes[m2, 2]
pop2
pop1
alltypes  <- alltypes[order(alltypes[, 2]), ]
head(alltypes)
pop2
pop1
alltypes[m1, 2] <- pop2
alltypes[m2, 2] <- pop1                                              # comment out for unidirectional dispersal
alltypes[m1, 2]
alltypes[m2, 2]
install.packages("rmarkdown", type = "source")
setwd("~/Dropbox/website/personal_site")
rmarkdown::render_site()
setwd("~/Dropbox/website/personal_site")
rmarkdown::render_site()
setwd("~/Dropbox/website/personal_site/")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
datafishmove
library(fishmove)
datafishmove
datafishmove()
speciesfishmove
speciesfishmove
data(speciesfishmove)
data(datafishmove)
datafishmove
library(fishmove)
datafishmove
data
Rdata
data()
library(fishmove)
data()
data(fishmove)
library(fishmove)
Len    <- c(450, 200, 50)   # total.length of fish (mm)
AspRat <- 1.5    # aspect ratio of fish ((caudal fin height)^2/fin area)
Time   <- 365    # time step (days) between sampling periods, higher = further
data(speciesfishmove)
data()
fish           <- fishmove(L=Len[1],AR=AspRat,SO=3,T=Time,interval="confidence",rep=30) # use fish move to calculate disp kernel
pdk(fish)     # plot dispersal kernnel
dist           <- fishmove.query(fish,p=0.67, dist=1000)                             # see above
dist
prob           <- fishmove.query(fish,p=0.67, prob=0.01)
prob
dist           <- fishmove.query(fish,p=0.67, dist=5000)
dist
dist           <- fishmove.query(fish,p=0.67, dist=6000)
dist
prob           <- fishmove.query(fish,p=0.67, prob=0.01)*(-1)
prob
prob           <- round(fishmove.query(fish,p=0.67, prob=0.01)*(-1))
prob
prob           <- round(fishmove.query(fish,p=0.67, prob=0.001)*(-1))
prob
prob/1000
round(prob/1000)
round(8.2)
prob           <- round(fishmove.query(fish,p=0.67, prob=0.001)*(-1)) #obtains the distance that dispersal approaches zero (prob of 0.01%)
prob
prob           <- round(fishmove.query(fish,p=0.67, prob=0.001)/(-dist_pos)) #obtains the distance that dispersal approaches zero (prob of 0.01%)
prob           <- round(fishmove.query(fish,p=0.67, prob=0.001)/(-dist_pops)) #obtains the distance that dispersal approaches zero (prob of 0.01%)
dist_pops      <- 1000   #distance of populations apart (meters)
prob           <- round(fishmove.query(fish,p=0.67, prob=0.001)/(-dist_pops)) #obtains the distance that dispersal approaches zero (prob of 0.01%)
prob
library(plyr)
dist           <- fishmove.query(fish,p=0.67, dist=c(1000, 2000))
dist
fishmove.query(fish,p=0.67, dist=2000)
prob
seq(prob, dist_pops)
seq(1, prob, dist_pops)
seq(dist_pops, prob*dist_pops, dist_pops)
dist           <- fishmove.query(fish,p=0.67, dist=seq(dist_pops, prob*dist_pops, dist_pops))
dist
pdk(fish)     # plot dispersal kernnel
K_pop          <- 200    # pop size in each subpopulation
dist
dist           <- round(fishmove.query(fish,p=0.67, prob=0.001)/(-dist_pops)) #obtains the distance that dispersal approaches zero (prob of 0.01%)
prob           <- fishmove.query(fish,p=0.67, dist=seq(dist_pops, prob*dist_pops, dist_pops))
prob           <- fishmove.query(fish,p=0.67, dist=seq(dist_pops, dist*dist_pops, dist_pops))
prob
ind_mig        <-  prob*K_pop
ind_mig
ind_mig        <-  round(prob*K_pop)
ind_mig
sum(ind_mig)
dist           <- round(fishmove.query(fish,p=0.67, prob=0.005)/(-dist_pops)) #obtains the distance that dispersal approaches zero (prob of 0.05%)
prob           <- fishmove.query(fish,p=0.67, dist=seq(dist_pops, dist*dist_pops, dist_pops))
ind_mig        <-  round(prob*K_pop)
sum(ind_mig)
prob
ind_mig
fish           <- fishmove(L=Len,AR=AspRat,SO=3,T=Time,interval="confidence",rep=30) # use fishmove to calculate disp kernel
fish
dist           <- round(fishmove.query(fish,p=0.67, prob=0.005)/(-dist_pops)) #obtains the distance that dispersal approaches zero (prob of 0.05%)
dist
fish[[1]]
fish
fish           <- fishmove(L=Len[1],AR=AspRat,SO=3,T=Time,interval="confidence",rep=30) # use fishmove to calculate disp kernel
fish
unlist(fish)
fish           <- fishmove(L=Len,AR=AspRat,SO=3,T=Time,interval="confidence",rep=30) # use fishmove to calculate disp kernel
fish[[1]][1]
fish[[1]]
fish[[]][1]
fish[1]
fish
fish[,1]
fish
fish           <- fishmove(L=Len[3],AR=AspRat,SO=3,T=Time,interval="confidence",rep=30) # use fishmove to calculate disp kernel
dist           <- round(fishmove.query(fish,p=0.67, prob=0.005)/(-dist_pops)) #obtains the distance that dispersal approaches zero (prob of 0.05%)
prob           <- fishmove.query(fish,p=0.67, dist=seq(dist_pops, dist*dist_pops, dist_pops)) #prob of dispersal for each dist
fish
dist
fishmove.query(fish,p=0.67, prob=0.005)
fish           <- fishmove(L=Len[2],AR=AspRat,SO=3,T=Time,interval="confidence",rep=30) # use fishmove to calculate disp kernel
fishmove.query(fish,p=0.67, prob=0.005)
dist           <- round(fishmove.query(fish,p=0.67, prob=0.005)/(-dist_pops)) #obtains the distance that dispersal approaches zero (prob of 0.05%)
prob           <- fishmove.query(fish,p=0.67, dist=seq(dist_pops, dist*dist_pops, dist_pops)) #prob of dispersal for each dist
dist
prob
pdk(fish)     # plot dispersal kernnel
ind_mig        <-  round(prob*K_pop) # number migrants by distance
sum(ind_mig) #total migrants in one generation
ind_mig
edge <- data.frame(from = c("s01","s01"),
to = c("s02","s03"))
edge
nodes <- data.frame(id = c("s10", "s20", "s30", "s40"))
nodes
edge <- data.frame(from = c("s10","s20", "s20"),
to = c("s20","s30", "s40"))
edge
rep(10000, 3)
edge <- data.frame(from = c("s10","s20", "s20"),
to = c("s20","s30", "s40"),
length = rep(10000, 3))
edge
install.packages("SSN")
library(SSN)
